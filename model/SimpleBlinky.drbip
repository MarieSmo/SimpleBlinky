model SimpleBlinky

import from "SimpleBlinky.cpp" {

    condition NodeCore(CORE)
    condition NodeSurface(SURFACES)
    //condition NodeSurfaceLeft(SURFACES)
    //condition NodeSurfaceRight(SURFACES)

    structure SimpleBlinkyMap {
        Node addCore()
        Node addSurfaces()
        void eraseCore()
        void eraseSurfaces()
    }

    structure BBMap {
        Node extend()
        void erase(Node)
        const bool isNeighbour(Node, Node, int)
    }
}

motif MotifSimple<SimpleBlinkyMap, DefaultAddressing> {
    rule configuration CreateBlinky()
    when(C.size() < 3){
        c = new CORE(C.size())
        nodeCore = S.addCore()
        (CORE FROM C).insert(c)
        @.bind(c, nodeCore)

        s = new SURFACES()
        nodeSurfaces = S.addSurfaces()
        (SURFACES FROM C).insert(s)
        @.bind(s, nodeSurfaces)

        new ConnectCoreAndSurface(c, s)
    }
}

initializer {
    b1 = new MotifSimple()
    b1.CreateBlinky()
}