model SimpleBlinky

import from "SimpleBlinky.cpp" {

    condition NodeCore(CORE)
    condition NodeSurface(SURFACES)
    //condition NodeSurfaceLeft(SURFACES)
    //condition NodeSurfaceRight(SURFACES)

    structure SimpleBlinkyMap {
        bool isAssembled(Node, Node)
    }

    structure BBMap {
        Node extend()
        void erase(Node)
        const bool isNeighbour(Node, Node, int)
    }
}

motif MotifSimple<SimpleBlinkyMap> {
    rule interaction BlockInitializer(CORE c, SURFACES s)
    when(!S.isAssembled(@c, @s) ){
        new ConnectCoreAndSurface(c, s)
    }
}

initializer {
    b1 = new MotifSimple()

    core = new CORE(1)
    surfaces = new SURFACES()
    surfaces2 = new SURFACES()
}