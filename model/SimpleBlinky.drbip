model SimpleBlinky

import from "SimpleBlinky.cpp" {

    condition NodeCore(CORE)
    condition NodeSurfaceLeft(SURFACE)
    condition NodeSurfaceRight(SURFACE)

    structure SimpleBlinkyMap {
        Node create()
        void setCore(Node)
        void setSurfaceLeft(Node)
        void setSurfaceRight(Node)
        const Node getCore()
        const Node getLeft()
        const Node getRight()
        const bool isCore(Node)
        const bool isLeft(Node)
        const bool isRight(Node)
    }

    structure BBMap {
        void insertCore(Node)
        void connectLeft(Node, Node)
        void connectRight(Node, Node)
        const bool isNeighbour(Node, Node, int)
        const bool hasNeighbour(Node, int)
        const bool isAlrdeadyConnected(Node, Node)
    }

    addressing BBAddressing {
    }
}

motif Block<SimpleBlinkyMap, DefaultAddressing> {
    rule interaction Assembled(CORE core, SURFACE left, SURFACE right)
    when(S.isCore(@core), S.isLeft(@left), S.isRight(@right)){
        new ConnectCoreAndSurface(core, left, right)
    }
}

motif Shape<BBMap, BBAddressing> {
    rule interaction connectSurface(SURFACE s1, SURFACE s2)
    when(true) {
        new Connection(s1, s2)
    }
}

global rule ConnectLeftBlockIMR(Shape shape, CORE cLeft, CORE cRight, Block bLeft, Block bRight, SURFACE sLeft, SURFACE sRight)
when(true,
    cLeft IN shape.C && !shape.S.hasNeighbour(shape.@cLeft, 1),
    cRight IN shape.C && cLeft != cRight && !shape.S.hasNeighbour(shape.@cRight, 2) && !shape.S.isAlrdeadyConnected(shape.@cLeft, shape.@cRight),
    cLeft in bLeft.C,
    cRight in bRight.C && bRight != bLeft,
    sLeft in bLeft.C && bLeft.S.isLeft(bLeft.@sLeft),
    sRight in bRight.C && bRight.S.isRight(bRight.@sRight) && bRight != bLeft
)
{
     shape.connectSurface(sLeft, sRight)
     shape.S.connectLeft(shape.@cLeft, shape.@cRight)
}

initializer {
    shape = new Shape()
    
    for(i : seq(0, 2)) {
        block = new Block()

        // Core
        core = new CORE(i)

        nodeCoreBlock = block.S.create()
        block.S.setCore(nodeCoreBlock)
        block.@.bind(core, nodeCoreBlock)
        (CORE FROM block.C).insert(core)

        nodeCoreShape = shape.S.create()
        shape.S.insertCore(nodeCoreShape)
        shape.@.bind(core, nodeCoreShape)
        (CORE FROM shape.C).insert(core)

        // Surface left
        sl = new SURFACE(4, i)
        NodeSL = block.S.create()
        block.@.bind(sl, NodeSL)
        block.S.setSurfaceLeft(NodeSL)
        (SURFACE FROM block.C).insert(sl)

        // Surface right
        sr = new SURFACE(8, i)
        NodeSR = block.S.create()
        block.@.bind(sr, NodeSR)
        block.S.setSurfaceRight(NodeSR)
        (SURFACE FROM block.C).insert(sr)

        //block.Assembled(core, sl, sr)
  }
}