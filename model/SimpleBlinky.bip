@cpp(include="stdio.h")
package SimpleBlinky
	extern function printf(string)
	extern function printf(string, int)

	port type SyncPort()

    //connect block surface to other block's surface
	connector type init(SyncPort s)
		define s
	end

	connector type Connection(SyncPort b1, SyncPort b2)
		define b1 b2
	end

	connector type ConnectCoreAndSurface(SyncPort core, SyncPort surface_left, SyncPort surface_right)
		define core surface_left surface_right
	end

	connector type DisconnectCoreAndSurface(SyncPort core, SyncPort surface_left, SyncPort surface_right)
		define core surface_left surface_right
	end

	atom type SURFACE()
		data bool connect = false
		data bool isAssembled = false

		// SEED connection and deconnection (output signal in parent block)
		export port SyncPort CONNECT()
        export port SyncPort DISCONNECT()

		export port SyncPort CONNECT_CORE()

        //possible states for all surface ports
		place DISCONNECTED, CONNECTED
		initial to DISCONNECTED

		// SURFACE instruction for left and right surface when state change
		on CONNECT from DISCONNECTED to CONNECTED
			provided( !connect )
				do {
				    printf("\033[32m[Output]:\033[0m Left has been connected\n");
					connect = !connect;
				}

		// SURFACE instruction when disconnected
		on DISCONNECT from CONNECTED to DISCONNECTED
			provided( connect )
				do {
					printf("\033[32m[Output]:\033[0m Left has been disconnected\n");
					connect = !connect ;
				}

		on CONNECT_CORE from CONNECTED to DISCONNECTED
			provided( isAssembled )
				do {
					printf("\033[32m[Output]:\033[0m Surfaces connected to core\n");
					isAssembled = !isAssembled;
				}

		on CONNECT_CORE from DISCONNECTED to CONNECTED
            provided ( !isAssembled )
				do {
					printf("\033[32m[Output]:\033[0m Surfaces disconnected to core\n");
					isAssembled = !isAssembled;
				}
	end

	atom type CORE(int id)
		data bool isAssembled = false

		export port SyncPort CORE_ASSEMBLE()
    	export port SyncPort CORE_DISASSEMBLE()

		place ASSEMBLED, DISASSEMBLED
		initial to DISASSEMBLED

		on CORE_ASSEMBLE from DISASSEMBLED to ASSEMBLED
            provided ( isAssembled )
				do {
					printf("\033[32mBlock %d\033[0m assembled", id);
					isAssembled = !isAssembled;				}

		on CORE_DISASSEMBLE from ASSEMBLED to DISASSEMBLED 
			provided ( !isAssembled )
			do{
				printf("\033[32mBlock %d\033[0m disassembled", id);
				isAssembled = !isAssembled;
			}

	end

	compound type SYS()
		component CORE c1(1)
		component SURFACE s1_left()
		component SURFACE s1_right()

		component CORE c2(2)
		component SURFACE s2_left()
		component SURFACE s2_right()

		connector ConnectCoreAndSurface assemble_block_1(c1.CORE_ASSEMBLE, s1_left.CONNECT_CORE, s1_right.CONNECT_CORE)
		connector ConnectCoreAndSurface assemble_block_2(c2.CORE_ASSEMBLE, s2_left.CONNECT_CORE, s2_right.CONNECT_CORE)

		connector Connection connect_block_1_2(s1_left.CONNECT, s2_right.CONNECT)
		connector Connection disconnect_block_1_2(s1_left.DISCONNECT, s2_right.DISCONNECT)

		connector DisconnectCoreAndSurface disassemble_block_1(c1.CORE_DISASSEMBLE, s1_left.CONNECT_CORE, s1_right.CONNECT_CORE)
		connector DisconnectCoreAndSurface disassemble_block_2(c2.CORE_DISASSEMBLE, s2_left.CONNECT_CORE, s2_right.CONNECT_CORE)
	end

end