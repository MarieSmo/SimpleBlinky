@cpp(include="ext.cpp")
package SimpleBlinky
	extern function printf(string)
	extern function printf(string, int)
	extern function printf(string, string)
	extern function printf(string, string, int)
	extern function string connection(int)

	port type SurfacePortAssemble(bool isAssembled)
    port type SurfacePortConnect(bool isConnected)
	port type CorePort(bool isAssembled)

	connector type Connection(SurfacePortConnect s1, SurfacePortConnect s2)
		define s1 s2
        on s1 s2
			down {
				//s1.isConnected = true;
				//s2.isConnected = true;
                printf("\n----- DISCONNECTION ------\n\n");
			}
	end

	connector type Disconnection(SurfacePortConnect s1, SurfacePortConnect s2)
		define s1 s2
        on s1 s2
			down {
				//s1.isConnected = false;
				//s2.isConnected = false;
                printf("\n----- CONNECTION ------\n\n");
			}
	end

	connector type ConnectCoreAndSurface(CorePort core, SurfacePortAssemble surface_left, SurfacePortAssemble surface_right)
		define core surface_left surface_right
		on core surface_left surface_right
			down {
				//core.isAssembled = true;
                //surface_left.isAssembled = true;
                //surface_right.isAssembled = true;
                printf("\n----- ASSEMBLE------\n\n");
			}
	end

	connector type DisconnectCoreAndSurface(CorePort core, SurfacePortAssemble surface_left, SurfacePortAssemble surface_right)
		define core surface_left surface_right
        on core surface_left surface_right
			down {
				//core.isAssembled = false;
                //surface_left.isAssembled = false;
                //surface_right.isAssembled = false;
                printf("\n----- DISASSEMBLE------\n\n");
			}
	end

	// ID represent the type of the surface
	// 		1: left
	//		2: right
	atom type SURFACE(int surface_id, int core_id)
		data bool isConnected
		data bool isAssembled

		// SEED connection and deconnection (output signal in parent block)
		export port SurfacePortConnect CONNECT(isConnected)
        export port SurfacePortConnect DISCONNECT(isConnected)
		export port SurfacePortAssemble CONNECT_CORE(isAssembled)
		export port SurfacePortAssemble DISCONNECT_CORE(isAssembled)

        // DISASSEMBLED mean that the SURFACE is not connected yet to a block.
        // ASSEMBLED mean that the SURFACE is a part of a block and connect to a CORE. It is not connected to another surfaces.
        // CONNECTED mean that the SURFACE is ASSEMBLED and connect to another surface.
		place DISASSEMBLED, ASSEMBLED, CONNECTED
		initial to DISASSEMBLED do {isAssembled = false; isConnected = false;}

		// SURFACE instruction for left and right surface when state change
        on CONNECT_CORE from DISASSEMBLED to ASSEMBLED
            provided (!isAssembled)
            do {
                printf("\033[32m[Surface %s]:\033[0m Assembled to core %d\n", connection(surface_id), core_id);
				isAssembled = true;				
            }
        
        on CONNECT from ASSEMBLED to CONNECTED
            provided (isAssembled && !isConnected)
            do {
                printf("\033[32m[Surface %s]:\033[0m Connected\n", connection(surface_id));
                isConnected = true;
            }

		// SURFACE instruction when disconnected
		on DISCONNECT from CONNECTED to ASSEMBLED
            provided (isAssembled && isConnected)
            do {
                printf("\033[32m[Surface %s]:\033[0m Disconnected\n", connection(surface_id));
                isConnected = false;
            }

		on DISCONNECT_CORE from ASSEMBLED to DISASSEMBLED
            provided (isAssembled)
            do {
                printf("\033[32m[Surface %s]:\033[0m Disassembled to core %d\n", connection(surface_id), core_id);
				isAssembled = false;
            }
	end

	atom type CORE(int id)
		data bool isAssembled

		export port CorePort CORE_ASSEMBLE(isAssembled)
    	export port CorePort CORE_DISASSEMBLE(isAssembled)

		place ASSEMBLED, DISASSEMBLED
		initial to DISASSEMBLED do {isAssembled = false;}

		on CORE_ASSEMBLE from DISASSEMBLED to ASSEMBLED
			do {
				printf("\033[32m[Block %d]\033[0m Assembled\n", id);
				isAssembled = true;				
			}

		on CORE_DISASSEMBLE from ASSEMBLED to DISASSEMBLED 
			do{
				printf("\033[32m[Block %d]\033[0m Disassembled\n", id);
				isAssembled = false;
			}

	end

	compound type SYS()
		component CORE c1(1)
		component SURFACE s1_left(4, 1)
		component SURFACE s1_right(8, 1)

		component CORE c2(2)
		component SURFACE s2_left(4, 1)
		component SURFACE s2_right(8, 1)

		connector ConnectCoreAndSurface assemble_block_1(c1.CORE_ASSEMBLE, s1_left.CONNECT_CORE, s1_right.CONNECT_CORE)
		connector ConnectCoreAndSurface assemble_block_2(c2.CORE_ASSEMBLE, s2_left.CONNECT_CORE, s2_right.CONNECT_CORE)

		connector Connection connect_block_1_2(s1_left.CONNECT, s2_right.CONNECT)
		connector Connection connect_block_2_1(s2_left.CONNECT, s1_right.CONNECT)

		connector Connection disconnect_block_2_1(s2_left.DISCONNECT, s1_right.DISCONNECT)
		connector Connection disconnect_block_1_2(s1_left.DISCONNECT, s2_right.DISCONNECT)

		connector DisconnectCoreAndSurface disassemble_block_1(c1.CORE_DISASSEMBLE, s1_left.DISCONNECT_CORE, s1_right.DISCONNECT_CORE)
		connector DisconnectCoreAndSurface disassemble_block_2(c2.CORE_DISASSEMBLE, s2_left.DISCONNECT_CORE, s2_right.DISCONNECT_CORE)
	end

end