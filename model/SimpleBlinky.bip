@cpp(include="stdio.h")
package SimpleBlinky
	extern function printf(string)
	extern function printf(string, int)

	port type SurfacePort()
	port type CorePort(bool isAssembled)

	connector type Connection(SurfacePort b1, SurfacePort b2)
		define b1 b2
	end

	connector type ConnectCoreAndSurface(CorePort core, SurfacePort surface_left, SurfacePort surface_right)
		define core surface_left surface_right
		on core surface_left surface_right
			down {
				core.isAssembled = true;
			}
	end

	connector type DisconnectCoreAndSurface(CorePort core, SurfacePort surface_left, SurfacePort surface_right)
		define core surface_left surface_right
	end

	atom type SURFACE()
		data bool connect = false
		data bool isAssembled = false

		// Surface connection and deconnection
		export port SurfacePort CONNECT()
        export port SurfacePort DISCONNECT()
		// Core assemble and disassemble
		export port CorePort ASSEMBLE()
		export port CorePort DISASSEMBLE()

        //possible states for all surface ports
		place DISCONNECTED, CONNECTED, ASSEMBLED, DISASSEMBLED
		initial to DISCONNECTED

		// SURFACE instruction for left and right surface when state change
		on CONNECT from DISCONNECTED to CONNECTED
			provided( !connect )
				do {
				    printf("\033[32m[Surface]:\033[0m Connected\n");
					connect = !connect;
				}

		// SURFACE instruction when disconnected
		on DISCONNECT from CONNECTED to DISCONNECTED
			provided( connect )
				do {
					printf("\033[32m[Surface]:\033[0m Disconnected\n");
					connect = !connect ;
				}

		on ASSEMBLE from DISASSEMBLED to ASSEMBLED
			provided( isAssembled )
				do {
					printf("\033[32m[Surface]:\033[0m Surfaces assembled to Core\n");
					isAssembled = !isAssembled;
				}

		on DISASSEMBLE from ASSEMBLED to DISASSEMBLED
            provided ( !isAssembled )
				do {
					printf("\033[32m[Surface]:\033[0m Surfaces disassembled to Core\n");
					isAssembled = !isAssembled;
				}
	end

	atom type CORE(int id)
		data bool isAssembled = false

		export port CorePort CORE_ASSEMBLE(isAssembled)
    	export port CorePort CORE_DISASSEMBLE(isAssembled)

		place ASSEMBLED, DISASSEMBLED
		initial to DISASSEMBLED

		on CORE_ASSEMBLE from DISASSEMBLED to ASSEMBLED
			do {
				printf("\033[32mBlock %d\033[0m assembled\n", id);
				isAssembled = true;				
			}

		on CORE_DISASSEMBLE from ASSEMBLED to DISASSEMBLED 
			do{
				printf("\033[32mBlock %d\033[0m disassembled\n", id);
				isAssembled = false;
			}

	end

	compound type SYS()
		component CORE c1(1)
		component SURFACE s1_left()
		component SURFACE s1_right()

		component CORE c2(2)
		component SURFACE s2_left()
		component SURFACE s2_right()

		connector ConnectCoreAndSurface assemble_block_1(c1.CORE_ASSEMBLE, s1_left.CONNECT_CORE, s1_right.CONNECT_CORE)
		connector ConnectCoreAndSurface assemble_block_2(c2.CORE_ASSEMBLE, s2_left.CONNECT_CORE, s2_right.CONNECT_CORE)

		connector Connection connect_block_1_2(s1_left.CONNECT, s2_right.CONNECT)
		connector Connection disconnect_block_1_2(s1_left.DISCONNECT, s2_right.DISCONNECT)

		connector DisconnectCoreAndSurface disassemble_block_1(c1.CORE_DISASSEMBLE, s1_left.CONNECT_CORE, s1_right.CONNECT_CORE)
		connector DisconnectCoreAndSurface disassemble_block_2(c2.CORE_DISASSEMBLE, s2_left.CONNECT_CORE, s2_right.CONNECT_CORE)
	end

end