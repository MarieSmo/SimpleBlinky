@cpp(include="stdio.h")
package SimpleBlinky
	extern function printf(string)
	extern function printf(string, int)

	port type SyncPort()

    //connect block surface to other block's surface
	connector type Connection(SyncPort b1, SyncPort b2)
		define b1 b2
	end

	connector type ConnectCoreAndSurface(SyncPort surface, SyncPort core)
		define surface core
	end

	connector type DisconnectCoreAndSurface(SyncPort surface, SyncPort core)
        define surface core
    end

	atom type SURFACES()
		data bool left = false
		data bool right = false

		// SEED connection and deconnection (output signal in parent block)
		export port SyncPort CONNECT_LEFT()
        export port SyncPort DISCONNECT_LEFT()
		export port SyncPort CONNECT_RIGHT()
		export port SyncPort DISCONNECT_RIGHT()

		export port SyncPort CONNECT_CORE()

        //possible states for all surface ports
		place DISCONNECTED, CONNECTED
		initial to DISCONNECTED

		// SURFACE instruction for left and right surface when state change
		on CONNECT_LEFT from DISCONNECTED to CONNECTED
			provided( !left )
				do {
				    printf("\033[32m[Output]:\033[0m Left has been connected\n");
					left = !left;
				}
		on CONNECT_RIGHT from DISCONNECTED to CONNECTED 
			provided( !right )
				do {
					printf("\033[32m[Output]:\033[0m Right has been connected\n");
					right = !right;
				}

		// SURFACE instruction when disconnected
		on DISCONNECT_LEFT from CONNECTED to DISCONNECTED
			provided( left )
				do {
					printf("\033[32m[Output]:\033[0m Left has been disconnected\n");
					left = !left ;
				}

      	on DISCONNECT_RIGHT from CONNECTED to DISCONNECTED
		  	provided( right )
				do {
					printf("\033[32m[Output]:\033[0m Right has been disconnected\n");
					right = !right;
				}

		on CONNECT_CORE from CONNECTED to DISCONNECTED
		    do {
		        printf("\033[32m[Output]:\033[0m Surfaces connected to core\n");
		    }
		on CONNECT_CORE from DISCONNECTED to CONNECTED
            do {
                printf("\033[32m[Output]:\033[0m Surfaces disconnected to core\n");
            }


	  	// Titouan test
		//on connectSurface from CONNECT to DISCONNECT do {connect = mcu_id;}
		//on disconnectSurface from DISCONNECT to CONNECT do {connect = 0;}
		//on initialize from CONNECT to DISCONNECT provided(connect > 0) do {connect = -1;}
	end

	atom type CORE(int id)
		export port SyncPort CORE_ASSEMBLE()
    	export port SyncPort CORE_DISASSEMBLE()

		place ASSEMBLED, DISASSEMBLED
		initial to DISASSEMBLED

		on CORE_ASSEMBLE from DISASSEMBLED to ASSEMBLED
            do {
                printf("\033[32mBlock %d\033[0m assembled", id);
            }

		on CORE_DISASSEMBLE from ASSEMBLED to DISASSEMBLED do{
			printf("\033[32mBlock %d\033[0m disassembled", id);
		}

	end


	compound type SYS()
		component CORE c(1)
		component SURFACES s()

		component CORE c2(2)
		component SURFACES s2()

		connector ConnectCoreAndSurface assemble_block_1(s.CONNECT_CORE, c.CORE_ASSEMBLE)
		connector ConnectCoreAndSurface assemble_block_2(s2.CONNECT_CORE, c2.CORE_ASSEMBLE)
		connector Connection connect_block_1_2(s.CONNECT_RIGHT, s2.CONNECT_LEFT)

		connector Connection disconnect_block_1_2(s.DISCONNECT_RIGHT, s2.DISCONNECT_LEFT)
		connector DisconnectCoreAndSurface disassemble_block_1(s.CONNECT_CORE, c.CORE_DISASSEMBLE)
		connector DisconnectCoreAndSurface disassemble_block_2(s2.CONNECT_CORE, c2.CORE_DISASSEMBLE)

	end

end